Hacking on Substance D
======================

Here are some guidelines about hacking on Substance D.

Using a Development Checkout
----------------------------

Below is a quick start on creating a development environment using a
Substance D checkout.

- Create a new directory somewhere and ``cd`` to it::

  $ mkdir ~/hack-on-substanced
  $ cd ~/hack-on-substanced

- Check out a read-only copy of the Substance D source::

  $ git clone git://github.com/Pylons/substanced.git

  (alternately, create a writeable fork on GitHub and check that out).

- Create a virtualenv in which to install Substance D::

  $ virtualenv -p python2.6 --no-site-packages env

- Install ``setuptools-git`` into the virtualenv (for good measure, as we're
  using git to do version control)::

  $ env/bin/easy_install setuptools-git

- Install Substance D from the checkout into the virtualenv using ``setup.py
  dev``.  ``setup.py dev`` is an alias for "setup.py develop" which also
  installs testing requirements such as nose and coverage.  Running
  ``setup.py dev`` *must* be done while the current working directory is the
  ``substanced`` checkout directory::

  $ cd substanced
  $ ../env/bin/python setup.py dev

- At that point, you should be able to create new Substance D projects by using
  ``pcreate``::

  $ cd ../env
  $ bin/pcreate -s substanced myproj

- And install that project using ``setup.py develop`` into the
  virtualenv::

  $ cd myproj
  $ ../bin/python setup.py develop


Authoring Javascript
--------------------

The Javascript resources are included in the package, under the ``substanced/sdi/static/dist``
directory. By default, these are in minified form.

Substance D provides a makefile that makes it easy to regenerate the ``dist`` resources.

To use this, first you need to have NodeJS and npm (the Node Package Manager) 
installed on your system. On a Ubuntu Linux machine,
these can be installed via::

    $ sudo apt-get install npm
    
On MacOSX with homebrew, you can do the following::

    $ brew install npm
    
For installation on other system, check out the documentation of NodeJS and npm.
http://nodejs.org/download/ and ...

We only test the system with NodeJS version >= 0.10, so please make sure that
you use a compliant version.

After having installed NodeJS and npm on your system,
you can cd to the package directory, and issue the following commands.

The following command re-generates all ``dist`` resources from scratch::

    $ make
    
This replaces all ``dist`` resources with a concatenated, but un-minified
version to help better debugging. Source files are also watched for changes,
and the resources are re-generated on the fly::

    $ make watch
    
After you finish working with ``make watch``, make sure you run ``make`` again
to switch back to the compressed resource versions. (Important before comitting.)


Adding Features
---------------

In order to add a feature to Substance D:

- The feature must be documented in both the API and narrative
  documentation (in ``docs/``).

- The feature must work fully on the following CPython versions: 2.6 and
  2.7 on both UNIX and Windows.

- The feature must work on the latest version of PyPy.

- The feature must not add unnecessary dependencies (where
  "unnecessary" is of course subjective, but new dependencies should
  be discussed).

The above requirements are relaxed for scaffolding dependencies.  If a
scaffold has an install-time dependency on something that doesn't work on a
particular platform, that caveat should be spelled out clearly in *its*
documentation (within its ``docs/`` directory).

Coding Style
------------

- PEP8 compliance.  Whitespace rules are relaxed: not necessary to put
  2 newlines between classes.  But 80-column lines, in particular, are
  mandatory.

- Please do not remove trailing whitespace.  Configure your editor to reduce
  diff noise.

Running Substance D Tests
-------------------------

To run the full test suite (your system will need Python 2.6 and 2.7 to be
installed):

- Install "tox" (``easy_install tox``).

- Run ``tox`` from within the top-level ``substanced`` directory.

To run tests for a single version of Python:

- Run ``setup.py dev`` (this will install ``coverage`` and ``nose``).

- Run ``setup.py nosetests``.

To run coverage tests for a single version of Python:

- Run ``setup.py dev`` (this will install ``coverage`` and ``nose``).

- Run ``setup.py nosetests --with-coverage``.

Test Coverage
-------------

- The codebase *must* have 100% test statement coverage after each commit.
  You can test coverage via ``tox -e coverage``, or alternately by installing
  ``nose`` and ``coverage`` into your virtualenv (easiest via ``setup.py
  dev``), and running ``setup.py nosetests --with-coverage``.

Documentation Coverage and Building HTML Documentation
------------------------------------------------------

If you fix a bug, and the bug requires an API or behavior modification, all
documentation in this package which references that API or behavior must
change to reflect the bug fix, ideally in the same commit that fixes the bug
or adds the feature.

To build and review docs (where ``$yourvenv`` refers to the virtualenv you're
using to develop substanced):

1. Run ``$yourvenv/bin/python setup.py dev docs``.  This will cause Sphinx
   and all development requirements to be installed in your virtualenv.

2. cd to the ``docs`` directory within your substanced checkout and execute
   ``make clean html SPHINXBUILD=$yourvenv/bin/sphinx-build``.  The
   ``SPHINXBUILD=...`` hair is there in order to tell it to use the
   virtualenv Python, which will have both Sphinx and SubstanceD (for API
   documentation generation) installed.

3. Open the ``docs/_build/html/index.html`` file to see the resulting HTML
   rendering.

Change Log
----------

- Feature additions and bugfixes must be added to the ``CHANGES.txt``
  file in the prevailing style.  Changelog entries should be long and
  descriptive, not cryptic.  Other developers should be able to know
  what your changelog entry means.
